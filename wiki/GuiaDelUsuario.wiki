#summary Guía del Usuario
#labels Featured

*`***`nota: los componentes están en desarrollo y su interfaz puede seguir cambiando antes de alcanzar la versión 0.2.0`***`*

== Pre-requisitos ==
 
Para trabajar con los componentes de factura electrónica debes tener instalados los siguientes sistemas:

  * [http://www.java.com/en/download/manual.jsp Java 6]
  * [http://maven.apache.org/download.html Maven]

=== Compilar los componentes  ===

Para compilar los componentes, utiliza el comando:

{{{mvn compile}}}

este comando preparará todas las dependencias y generará el código necesario para trabajar con el XSD de la versión 3.0  del CFD.

== Librería de componentes ==

La librería presenta una interfaz muy simple centrada en el Comprobante Fiscal Digital (CFD), la clase principal es `CFDv3` que representa y tiene la lógica correspondiente a la versión 3.0 del CFD.

_Nota:  Puedes encontrar un ejemplo del uso de las librerías en la clase_ `mx.bigdata.cfdi.tools.CLI`.

=== Creación del CFDv3 ===

Se puede crear un `CFDv3` de dos formas,

  * A partir de un `InputStream`, que puede ser un archivo previamente  generado o el contenido de un request HTTP, etc.:
{{{
    CFDv3 cfd = new CFDv3(new FileInputStream(file));
}}}
  * O a partir de un `Comprobante`, que es el modelo que representa al XSD en la aplicación: 
{{{
    ObjectFactory of = new ObjectFactory();
    Comprobante comp = of.createComprobante();
    comp.setVersion("3.0");
    comp.setFecha(new Date());
    ...
    CFDv3 cfd = new CFDv3(comp);
}}}

=== Principales operaciones === 

El CFDv3, tiene dos métodos principales firmar `sign(Key key, Certificate cert)` y verificar `verify()`; además de estos métodos tiene algunos métodos intermedios que permiten depurar la información.

Un flujo típico para _firmar_ un CFD se ve así:

{{{
    CFDv3 cfd = new CFDv3(new FileInputStream(file)); // Crea el CFD a partir de un archivo
    cfd.validate(); // Valida que todos los elementos del XML estén presentes de acuerdo al XSD
    Key key = KeyLoader.loadPKCS8PrivateKey(new FileInputStream(keyfile),  password); // Carga la llave privada
    Certificate cert = KeyLoader.loadX509Certificate(new FileInputStream(certFile)); // Carga el certificado
    cfd.sign(key, cert); // Firma el CFD
    cfd.marshal(new FileOutputStream(outFile)); // Serializa el CFD ya firmado
}}}

Un flujo típico para _verificar_ un CFD, se ve así:

{{{
    CFDv3 cfd = new CFDv3(new FileInputStream(file)); // Crea el CFD a partir de un archivo
    cfd.validate(); // Valida el XML, que todos los elementos estén presentes
    cfd.verify(); // Verifica un CFD ya firmado
}}}


=== Creación de un `Comprobante` en forma procedural ===

Para crear un componente de forma procedural es importante utilizar los métodos de la clase `ObjectFactory`

{{{
    ObjectFactory of = new ObjectFactory();
    Comprobante comp = of.createComprobante();
    comp.setVersion("3.0");
    comp.setFecha(new Date());
    comp.setFormaDePago("PAGO EN UNA SOLA EXHIBICION");
    comp.setNoCertificado("30001000000100000800");
    comp.setSubTotal(new BigDecimal("488.50"));
    comp.setTotal(new BigDecimal("488.50"));
    comp.setTipoDeComprobante("ingreso");
    comp.setEmisor(createEmisor(of));
    comp.setReceptor(createReceptor(of));
    comp.setConceptos(createConceptos(of));
    comp.setImpuestos(createImpuestos(of));
    CFDv3 cfd = new CFDv3(comp); 
    ...
}}}

== Herramientas de línea de comandos ==

Para poder ejecutar los programas desde la línea de comandos ejecuta la siguiente instrucción:

{{{mvn dependency:copy-dependencies}}}

Asegurate de incluir las clases compiladas y las dependencias en el CLASSPATH, esto lo puedes hacer ejecutando el siguiente comando:

{{{
# en *nix:
export CLASSPATH=target/classes/:target/dependency/not-yet-commons-ssl-0.3.11.jar:target/dependency/guava-r06.jar:target/dependency/commons-codec-1.4.jar
}}}

{{{
rem en windows: 
set CLASSPATH=target\classes\;target\dependency\not-yet-commons-ssl-0.3.11.jar;target\dependency\guava-r06.jar;target\dependency\commons-codec-1.4.jar
}}}

  * Para validar el XML de ejemplo contra el esquema, utiliza el siguiente comando:

{{{ java mx.bigdata.cfdi.tools.CLI valida resources/xml/cfdv3.xml }}}

  * Para verificar el sello del CDF de ejemplo, utiliza el siguiente comando:

{{{ java mx.bigdata.cfdi.tools.CLI verifica resources/xml/cfdv3.xml }}}

  * Para firmar el CDF de ejemplo, utiliza el siguiente comando:

{{{ java mx.bigdata.cfdi.tools.CLI firma resources/xml/cfdv3.xml resources/certs/emisor.key a0123456789 resources/certs/emisor.cer cfdv3_firmado.xml }}}