#summary Guía del Usuario
#labels Featured

`***`nota: los componentes están en desarrollo y su interfaz puede llegar a cambiar antes de alcanzar la versión 1.0`***`

<wiki:toc max_depth="1" />

== Pre-requisitos ==
 
Para trabajar con los componentes de factura electrónica debes tener instalados los siguientes sistemas:

  * [http://www.java.com/en/download/manual.jsp Java 6]
  * [http://maven.apache.org/download.html Maven]

=== Compilar los componentes  ===

Para compilar los componentes, utiliza el comando:

{{{mvn compile}}}

este comando preparará todas las dependencias y generará el código necesario para trabajar con el XSD de la versión 3.0  del CFD

== Librería de componentes ==

La librería presenta una interfaz muy simple centrada en el Comprobante Fiscal Digital (CFD), la clase principal es `CFDv3` que representa y tiene la lógica correspondiente a la versión 3.0 del CFD.

=== Creación del CFDv3 ===

Se puede crear un `CFDv3` de dos formas,

  * A partir de un `InputStream`, que puede ser un archivo previamente  generado o el contenido de un request HTTP, etc.:
{{{
CFDv3 cfd = new CFDv3(new FileInputStream(file));
}}}
  * O a partir de un `Comprobante`, que es el modelo que representa al XSD en la aplicación: 
{{{
CFDv3 cfd = new CFDv3(new Comprobante());
}}}

=== Principales operaciones === 

El CFDv3, tiene dos métodos principales firmar `sign(Key key, Certificate cert)` y verificar `verify()`; además de estos métodos tiene algunos métodos intermedios que permiten depurar la información.

Un flujo típico para _verificar_ un CFD, se ve así:

{{{
    CFDv3 cfd = new CFDv3(new FileInputStream(file)); // Crea el CFD a partir de un archivo
    cfd.validate(); // Valida el XML, que todos los elementos estén presentes
    cfd.verify(); // Verifica un comprobante ya firmado
}}}

Un flujo típico para _firmar_ un CFD se ve así:

{{{
    CFDv3 cfd = new CFDv3(new FileInputStream(file)); // Crea el CFD a partir de un archivo
    cfd.validate(); // Valida el XML, que todos los elementos estén presentes
    Key key = KeyLoader.loadPKCS8PrivateKey(new FileInputStream(keyfile),  password); // Carga la llave privada
    Certificate cert = KeyLoader.loadX509Certificate(new FileInputStream(certFile)); // Carga el certificado
    cfd.sign(key, cert); // Firma el comprobante
    cfd.marshal(new FileOutputStream(outFile)); // Serializa el comprobante ya firmado
}}}

=== Creación programática de un Comprobante ===

{{{
    ObjectFactory of = new ObjectFactory();
    Comprobante comp = of.createComprobante();
    comp.setVersion("3.0");
    Date date = new GregorianCalendar(2010, 02, 06, 20, 38, 12).getTime();
    comp.setFecha(date);
    comp.setSello("");
    comp.setFormaDePago("PAGO EN UNA SOLA EXHIBICION");
    comp.setNoCertificado("30001000000100000800");
    comp.setCertificado("");
    comp.setSubTotal(new BigDecimal("488.50"));
    comp.setTotal(new BigDecimal("488.50"));
    comp.setTipoDeComprobante("ingreso");
    comp.setEmisor(createEmisor(of));
    comp.setReceptor(createReceptor(of));
    comp.setConceptos(createConceptos(of));
    comp.setImpuestos(createImpuestos(of));
    CFDv3 cfd = new CFDv3(new FileInputStream(file)); // Crea un CFD a partir de un Comprobante
    ...
}}}

== Herramientas ==

Asegurate de incluir las clases compiladas en el CLASSPATH, esto lo puedes hacer ejecutando el siguiente comando:

  * en `*`nix: `export CLASSPATH=target/classes/`
  * en windows: `set CLASSPATH=target\classes\`

=== Validar el XML de un CFD ===

Para validar el XML de ejemplo contra el esquema, utiliza el siguiente comando:

{{{ java mx.bigdata.cfdi.tools.CFDv3Validator resources/xml/cfdv3.xml resources/xsd/cfdv3.xsd }}}

Reemplaza el primer argumento para validar otros XMLs

=== Verificar el sello de un CFD ===

Para verificar el sello del XML de ejemplo, utiliza el siguiente comando:

{{{ java mx.bigdata.cfdi.tools.CFDv3Verifier resources/xml/cfdv3.xml resources/xslt/cadenaoriginal_3_0.xslt }}}

Reemplaza el primer argumento para verificar otros CFDs