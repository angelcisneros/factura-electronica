#summary Guía del Usuario
#labels Featured

*`***`nota: la librería se encuentra actualmente en desarrollo y su interfaz puede cambiar hasta alcanzar la versión 0.2`***`*

= Librería de componentes =

La librería presenta una interfaz muy simple centrada en el Comprobante Fiscal Digital (CFD), las clases principales son `CFDv3` y `CFDv2` que tienen la lógica correspondiente a las versiones 3.0 y 2.0 del CFD respectivamente.

_Nota:  Puedes encontrar un ejemplo del uso de las librerías en las clases:_ [http://code.google.com/p/factura-electronica/source/browse/trunk/src/main/java/mx/bigdata/sat/cfdi/examples/Main.java mx.bigdata.sat.cfdi.examples.Main] y [http://code.google.com/p/factura-electronica/source/browse/trunk/src/main/java/mx/bigdata/sat/cfd/examples/Main.java mx.bigdata.sat.cfd.examples.Main].
 
== Creación de un CFDv3 ==

Se puede crear un `CFDv3` de dos formas,

  * A partir de un `InputStream`, que puede ser un archivo previamente  generado o el contenido de un request HTTP, etc.:
{{{
    CFDv3 cfd = new CFDv3(new FileInputStream(file));
}}}
  * O a partir de un `Comprobante`, que es el modelo que representa al XSD en la aplicación: 
{{{
    ObjectFactory of = new ObjectFactory();
    Comprobante comp = of.createComprobante();
    comp.setVersion("3.0");
    comp.setFecha(new Date());
    ...
    CFDv3 cfd = new CFDv3(comp);
}}}

== Creación de un CFDv2 ==

Se puede crear un `CFDv2` de dos formas,

  * A partir de un `InputStream`, que puede ser un archivo previamente  generado o el contenido de un request HTTP, etc.:
{{{
    CFDv2 cfd = new CFDv2(new FileInputStream(file));
}}}
  * O a partir de un `Comprobante`, que es el modelo que representa al XSD en la aplicación: 
{{{
    ObjectFactory of = new ObjectFactory();
    Comprobante comp = of.createComprobante();
    comp.setVersion("2.0");
    comp.setFecha(new Date());
    ...
    CFDv2 cfd = new CFDv2(comp);
}}}

=== Principales operaciones === 

El CFDv3 y el CFDv2, tienen dos métodos principales`sellar(Key key, Certificate cert)` y `verificar()`.

Un flujo típico para _firmar_ un CFD se ve así:

{{{
    CFDv3 cfd = new CFDv3(new FileInputStream(file)); // Crea el CFD a partir de un archivo
    Key key = KeyLoader.loadPKCS8PrivateKey(new FileInputStream(keyfile),  password); // Carga la llave privada
    Certificate cert = KeyLoader.loadX509Certificate(new FileInputStream(certFile)); // Carga el certificado
    cfd.sellar(key, cert); // Firma el CFD
    cfd.validar(); // Valida que todos los elementos del XML estén presentes de acuerdo al XSD
    cfd.guardar(new FileOutputStream(outFile)); // Serializa el CFD ya firmado
}}}

Un flujo típico para _verificar_ un CFD, se ve así:

{{{
    CFDv3 cfd = new CFDv3(new FileInputStream(file)); // Crea el CFD a partir de un archivo
    cfd.validar(); // Valida el XML, que todos los elementos estén presentes
    cfd.verificar(); // Verifica un CFD ya firmado
}}}

Además de estas operaciones el CFDv2 permite verificar el CFD utilizando un certificado externo:

{{{
    CFDv2 cfd = new CFDv2(new FileInputStream(file)); // Crea el CFD a partir de un archivo
    Certificate cert = KeyLoader.loadX509Certificate(new FileInputStream(certFile)); // Carga el certificado
    cfd.validar(); // Valida el XML, que todos los elementos estén presentes
    cfd.verificar(cert); // Verifica un CFD ya firmado
}}}

=== Creación de un `Comprobante` utilizando la librería ===

Para crear un componente de forma procedural es importante utilizar los métodos de la clase `ObjectFactory`

{{{
    ObjectFactory of = new ObjectFactory();
    Comprobante comp = of.createComprobante();
    comp.setVersion("3.0");
    comp.setFecha(new Date());
    comp.setFormaDePago("PAGO EN UNA SOLA EXHIBICION");
    comp.setNoCertificado("30001000000100000800");
    comp.setSubTotal(new BigDecimal("488.50"));
    comp.setTotal(new BigDecimal("488.50"));
    comp.setTipoDeComprobante("ingreso");
    comp.setEmisor(createEmisor(of));
    comp.setReceptor(createReceptor(of));
    comp.setConceptos(createConceptos(of));
    comp.setImpuestos(createImpuestos(of));
    CFDv3 cfd = new CFDv3(comp); 
    ...
}}}

= Uso de la librería =

== Instalación ==

  # Descarga la [http://code.google.com/p/factura-electronica/downloads/list última versión] de las librerías 
  # Descomprime el archivo cfdi-X.Y.Z-bin.zip o  cfdi-X.Y.Z-bin.tar.gz

=== Herramientas de línea de comandos ===

La librería incluye dos programas que te permiten trabajar con los CFD desde la linea de comandos: cfd para trabajar con la versión 2.0 y cfdi para trabajar con la versión 3.0. Para ejecutar estos comandos cambiate al directorio donde descomprimiste los archivos y ejecuta cualquiera de los siguientes ejemplos:  

 _Nota: Se muestran los ejemplos para `*`nix, seguidos de los ejemplos para windows._

  * Para validar un CFD sellado contra el esquema:

{{{ 
# v3.0:
./bin/cfdi validar ejemplos/cfdv3.externo.xml
# v2.0:
./bin/cfd validar ejemplos/cfdv2.externo.xml
}}}

{{{ 
rem v3.0:
.\bin\cfdi validar ejemplos\cfdv3.externo.xml 
rem v2.0:
.\bin\cfd validar ejemplos\cfdv2.externo.xml 
}}}

  * Para verificar el sello del CFDI:

{{{ 
# v3.0
./bin/cfdi verificar ejemplos/cfdv3.externo.xml 
# v2.0
./bin/cfd verificar ejemplos/cfdv2.externo.xml 
}}}

{{{ 
rem v3.0:
.\bin\cfdi verificar ejemplos\cfdv3.externo.xml 
rem v2.0:
.\bin\cfd verificar ejemplos\cfdv2.externo.xml 
}}}

  * Para sellar el CFDI:

{{{ 
# v3.0:
./bin/cfdi sellar ejemplos/cfdv3.xml ejemplos/emisor.key a0123456789 ejemplos/emisor.cer cfdv3_sellado.xml 
# v2.0:
./bin/cfd sellar ejemplos/cfdv2.xml ejemplos/emisor.key a0123456789 ejemplos/emisor.cer cfdv2_sellado.xml 
}}}
{{{ 
rem v3.0:
.\bin\cfdi sellar ejemplos\cfdv3.xml ejemplos\emisor.key a0123456789 ejemplos\emisor.cer cfdv3_sellado.xml 
rem v2.0:
.\bin\cfd sellar ejemplos\cfdv2.xml ejemplos\emisor.key a0123456789 ejemplos\emisor.cer cfdv2_sellado.xml 
}}}


  * Para verificar un CFDI timbrado:

{{{ 
# v3.0:
./bin/cfdi verificar-timbrado ejemplos/cfdv3.externo.xml ejemplos/pac.cer
}}}
{{{ 
rem v3.0:
.\bin\cfdi verificar-timbrado ejemplos\cfdv3.externo.xml ejemplos\pac.cer
}}}

  * _Funcionalidad adicional, para timbrar el CFDI_:

{{{ 
# v3.0:
./bin/cfdi timbrar ejemplos/cfdv3.externo.xml ejemplos/pac.key a0123456789 ejemplos/pac.cer cfdv3_timbrado.xml
}}}
{{{ 
rem v3.0:
.\bin\cfdi timbrar ejemplos\cfdv3.externo.xml ejemplos\pac.key a0123456789 ejemplos\pac.cer cfdv3_timbrado.xml
}}}

 _Nota: Estos comandos no regresan ningún mensaje si la operación fue exitosa._


= Código fuente =

Los usuarios avanzados pueden estar interesados en descargar y compilar el código fuente, para ello es necesario seguir los siguientes pasos:

== Pre-requisitos ==

Para trabajar con el código fuente de la librería de factura electrónica debes tener instalados los siguientes sistemas:

  * [http://www.java.com/en/download/manual.jsp Java 6]
  * [http://maven.apache.org/download.html Maven]

== Obtener el código fuente ==

Puedes obtener el código fuente de las librerías en la siguiente dirección: http://code.google.com/p/factura-electronica/source/checkout

Revisa la información en las [PreguntasFrecuentes preguntas frecuentes] para agregar el código fuente a un IDE (Netbeans o Eclipse)

== Compilar los componentes  ==

Para compilar los componentes, utiliza el comando:

{{{mvn compile}}}

este comando preparará todas las dependencias y generará el código necesario para trabajar con el XSD de la versión 3.0 y 2.0 del CFD y la versión 1.0 del TFD.

== Ejecutar el programa de ejemplo ==

Para ejecutar el programa de ejemplo, utiliza el comando:

{{{mvn exec:java}}}

= Dudas y comentarios =

¿Tienes algún problema o sugerencia de mejora?  

Busca la respuesta en la sección de [PreguntasFrecuentes preguntas frecuentes] o en la sección de [http://code.google.com/p/factura-electronica/issues/list seguimiento]. Si no encuentras la respuesta, crea una nueva entrada utilizando la liga de _New Issue_ y haremos todo lo posible por solucionarlo.
 